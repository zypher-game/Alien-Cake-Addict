// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    ACA_ZK_ELF, ACA_ZK_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use ethers_core::types::Address;
use serde::Serialize;

#[derive(Serialize)]
pub enum Operation {
    // player, position
    Move(Address, usize, usize),
    // index, position
    CakeCreated(u32, usize, usize),
    // index
    CakeMissed(u32),
}

pub fn prove(operations: &Vec<Operation>, output: &[u8]) -> Result<Vec<u8>, ()> {
    let env = ExecutorEnv::builder()
        .write(operations)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, ACA_ZK_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    let output2: Vec<u8> = receipt.journal.decode().unwrap();
    assert_eq!(output, &output2);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(ACA_ZK_ID)
        .unwrap();

    // TODO stark to snark
    Ok(vec![])
}


#[cfg(test)]
mod tests {
    use super::*;
    use ethers_core::{abi::{encode, Token}, types::H160};

    fn simple_game_result(ranks: &[Address]) -> Vec<u8> {
        encode(&[Token::Array(
            ranks.iter().map(|v| Token::Address(*v)).collect(),
        )])
    }

    #[test]
    fn risc0_aca_works() {
        let player1 = H160([1u8; 20]);
        let player2 = H160([2u8; 20]);
        let player3 = H160([3u8; 20]);
        let player4 = H160([4u8; 20]);

        let operations = vec![
            Operation::CakeCreated(1, 1, 1),
            Operation::CakeMissed(1),
            Operation::CakeCreated(2, 2, 2),
            Operation::Move(player1, 1, 1),
            Operation::Move(player2, 1, 1),
            Operation::Move(player3, 1, 1),
            Operation::Move(player4, 1, 1),
            Operation::Move(player1, 1, 2),
            Operation::Move(player1, 2, 2),
            Operation::Move(player4, 2, 1),
            Operation::Move(player4, 2, 2),
            Operation::CakeCreated(3, 3, 3),
            Operation::Move(player1, 2, 3),
            Operation::Move(player1, 3, 3),
            Operation::CakeCreated(4, 4, 4),
            Operation::Move(player4, 2, 3),
            Operation::Move(player4, 2, 4),
            Operation::Move(player4, 3, 4),
            Operation::Move(player4, 4, 4),
        ];

        let rank = simple_game_result(&[player1, player4]);
        prove(&operations, &rank).unwrap();
    }
}
