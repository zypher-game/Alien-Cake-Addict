// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    ACA_ZK_ELF, ACA_ZK_ID
};
use risc0_zkvm::{get_prover_server, ExecutorEnv};
use risc0_zkvm::sha::Digest;
use risc0_zkvm::{ProverOpts, InnerReceipt};
use risc0_zkvm::stark_to_snark;
use ethers_core::types::Address;
use serde::Serialize;
use risc0_zkvm::recursion::identity_p254;
use sha2::{Sha256, Digest as _};

#[derive(Serialize)]
pub enum Operation {
    // player, position
    Move(Address, usize, usize),
    // index, position
    CakeCreated(u32, usize, usize),
    // index
    CakeMissed(u32),
}

pub fn prove(operations: &Vec<Operation>, output: &[u8]) -> Result<Vec<u8>, ()> {
    // RISC0_PROVER
    let prover = get_prover_server(&ProverOpts::groth16()).unwrap();

    let env = ExecutorEnv::builder()
        .write(operations)
        .unwrap()
        .build()
        .unwrap();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, ACA_ZK_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;


    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(ACA_ZK_ID)
        .unwrap();

    // TODO stark to snark
    let proof = match receipt.inner {
        InnerReceipt::Groth16(ref proof) => {
            proof.seal.clone()
        }
        InnerReceipt::Succinct(ref proof) => {
            panic!("NOT SUPPORT 1");
        }
        _ => {
            panic!("NOT SUPPORT 2");
        }
    };

    let (committed_vk_digest, committed_input_digest): (Digest, Digest) =
        receipt.journal.decode().unwrap();

    let mut hasher = Sha256::new();
    hasher.update(output);
    let commited2 = hasher.finalize();

    assert_eq!(committed_input_digest.as_bytes(), &commited2[..]);

    let image_ID = ACA_ZK_ID;

    Ok(proof)
}


#[cfg(test)]
mod tests {
    use super::*;
    use ethers_core::{abi::{encode, Token}, types::H160};

    fn simple_game_result(ranks: &[Address]) -> Vec<u8> {
        encode(&[Token::Array(
            ranks.iter().map(|v| Token::Address(*v)).collect(),
        )])
    }

    #[test]
    fn risc0_aca_works() {
        let player1 = H160([1u8; 20]);
        let player2 = H160([2u8; 20]);
        let player3 = H160([3u8; 20]);
        let player4 = H160([4u8; 20]);

        let operations = vec![
            Operation::CakeCreated(1, 1, 1),
            Operation::CakeMissed(1),
            Operation::CakeCreated(2, 2, 2),
            Operation::Move(player1, 1, 1),
            Operation::Move(player2, 1, 1),
            Operation::Move(player3, 1, 1),
            Operation::Move(player4, 1, 1),
            Operation::Move(player1, 1, 2),
            Operation::Move(player1, 2, 2),
            Operation::Move(player4, 2, 1),
            Operation::Move(player4, 2, 2),
            Operation::CakeCreated(3, 3, 3),
            Operation::Move(player1, 2, 3),
            Operation::Move(player1, 3, 3),
            Operation::CakeCreated(4, 4, 4),
            Operation::Move(player4, 2, 3),
            Operation::Move(player4, 2, 4),
            Operation::Move(player4, 3, 4),
            Operation::Move(player4, 4, 4),
        ];

        let rank = simple_game_result(&[player1, player4]);
        prove(&operations, &rank).unwrap();
    }
}
